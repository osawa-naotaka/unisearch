---
import Html from "../layout/html.astro";
---
<Html>
	<section>
		<input type="search" class="search-query" placeholder="SEARCH KEYWORDS" />
		<div class="search-result">
			<div class="loading">loading index...</div>
			<ul class="result-list"></ul>
		</div>
	</section>
</Html>
<script>
	import { createSearchFn, StaticSeekError } from "staticseek";
	import type { SearchResult } from "staticseek";
	import * as v from "valibot";
	import { PostInfo_v } from '../utils/types';
	import * as r from "../utils/dom-builder";
	
	
	function generateResultHTMLElement(search_results: SearchResult[]): HTMLLIElement[] {
		return search_results.map(sr => {
			const post = v.parse(PostInfo_v, sr.key);
	
			return r.li({}, 
				r.div({ className: "search-result-title" },
					r.text(post.data.title)
				),
				r.div({ className: "search-result-description" },
					r.text(sr.refs[0].wordaround || "")
				)
			);
		});
	}
	
	
	const query  = r.forceQuerySelector<HTMLInputElement>(".search-query");
	const result = r.forceQuerySelector<HTMLElement>     (".search-result");
	const list   = r.forceQuerySelector<HTMLUListElement>(".result-list");

	const search_function = createSearchFn('/searchindex.json', (isLoading) => {
		if (isLoading) {
			result.classList.add("is-loading");
		} else {
			result.classList.remove("is-loading");
		}
	});

	query.addEventListener('input', async () =>
	{
		const search_results = await search_function(query.value);
		list.innerText = "";
		if(!(search_results instanceof StaticSeekError)) {
			generateResultHTMLElement(search_results).map((e) => list.appendChild(e));
		}
	});
</script>
<style>
	.search-bar {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding-block-end: 0.25rem;
		border-block-end: 2px solid;
	}
	.search-query {
		width: 100%;
		height: 1.5rem;
		padding: 1rem;
		border: 1px solid var(--color-main);
		border-radius: 4px;
		font-size: 1rem;
	}
	.search-text::placeholder {
		opacity: 0.5;
	}
	.search-result {
		margin-block: 2rem;
		list-style-type: none;
	}
	.search-result > .loading {
		display: none;
	}
	.search-result.is-loading > .loading {
		display: block;
	}
	:global(.search-result-title) {
		border-bottom: 2px solid var(--color-main);
	}
</style>
